from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
import hashlib

#key = get_random_bytes(32) # Use a stored / generated key

mdp = 'tezst25556'
mdp = mdp.encode()
key = hashlib.sha256(mdp).digest()

data_to_encrypt = '131207836922515481273352615808329596837157989262183080004140065865228226390427645451843419045055601373060512082684711320530527038141872819561299686991507005050312218416983749689381735641920616245414035555958777975257630974509991379168282491579452963367353293499955228498828442646021699275372700542176865601701316491745792990871805733341473735466350130220522787032795216596294214133004808794861612356982678017463423184588073090086900806617023387090291075407018330081511276920578509131400703510895724314539192377984442557243414738383258529645697203367630142881968682251286363211980879692749819646918406134046360595664916097670633733914437979483904126800311455044126630530447596543805770304293319537187069334120604818349830762761852403222771037167016352423575530013097857316127357675487183372462944435210215398804752539218651307687019526863925387165216599163359030821045053726912009213460104164627802341553489359538925031174995938143067949768347914096926024006912716366563545919071027354503816707217518403579630830279307952784181086934826402180716736262942479496369750354747666234710524182095704232121044807769658314318033129182345461064763249672210350608885043964822963451499361781201604279444592804998347732708382849460335217569640497' # This is your data

# === Encrypt ===

# First make your data a bytes object. To convert a string to a bytes object, we can call .encode() on it
data = data_to_encrypt.encode('utf-8')

# Create the cipher object and encrypt the data
cipher_encrypt = AES.new(key, AES.MODE_CFB)
ciphered_bytes = cipher_encrypt.encrypt(data)

# This is now our data
iv = cipher_encrypt.iv
ciphered_data = ciphered_bytes
print("ciphered data = "+ str(ciphered_data))
print("iv = "+ str(iv))

# From here we now assume that we do not know data_to_encrypt or data (we will use it for proof afterwards
# We do know the iv, data and the key you have stored / generate

# === Decrypt ===

# Create the cipher object and decrypt the data
cipher_decrypt = AES.new(key, AES.MODE_CFB, iv=iv)
deciphered_bytes = cipher_decrypt.decrypt(ciphered_data)

# Convert the bytes object back to the string
decrypted_data = deciphered_bytes.decode('utf-8')
print("end result = "+ str(decrypted_data))


